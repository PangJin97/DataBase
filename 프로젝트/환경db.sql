
#라즈베리 파이로 수집하는 데이터테이블
CREATE TABLE ENVIRONMENT(
	ENV_ID INT PRIMARY KEY AUTO_INCREMENT #날짜별로 얻은 데이터를 구별하기 위해 식별번호 ID를 부여 
	,TEMPERATURE FLOAT #온도	
	,ILLUMINANCE INT	#조도 
	,JOIN_DATE DATETIME DEFAULT SYSDATE() #측정 날짜
	,HUMIDITY FLOAT #습도
	,SOIL_MOISTURE FLOAT #토양 수분 
);


SELECT * FROM environment;

COMMIT;


#각 식물의 정적 데이터 테이블
SELECT * FROM crop_standards;


#회원정보테이블
CREATE TABLE USER(
	USER_EMAIL VARCHAR(50) PRIMARY KEY NOT NULL,
	USER_PASSWORD VARCHAR(100) NOT NULL UNIQUE,
	USER_TEL VARCHAR(50) NOT NULL UNIQUE,
	USER_ROLE VARCHAR(50) NOT NULL DEFAULT 'ROLE_FARMER', # ROLE_ADMIN #권한 같은 경우 ROLE을 붙이는 것이 좋다 
	JOIN_DATE DATETIME NOT NULL DEFAULT SYSDATE(),
	USER_NAME VARCHAR(50) NOT NULL
); 

SELECT * FROM USER;



#PLANT STORY 테이블
CREATE TABLE PLANT_STORY(
	BOARD_NUM INT PRIMARY KEY AUTO_INCREMENT
	,TITLE VARCHAR(100) NOT NULL
	,CONTENT LONGTEXT NOT NULL
	,READ_CNT INT DEFAULT 0
	,REG_DATE DATETIME DEFAULT SYSDATE()
	,USER_EMAIL VARCHAR(50) NOT NULL REFERENCES USER(USER_EMAIL)
);

SELECT * FROM plant_story;



#댓글 테이블
#외래 키(Foreign Key)를 DB에 설정하더라도, DTO 클래스에서는 기존처럼 평범한 필드로 작성하면 된다.
CREATE TABLE PLANT_REPLY(
  COMMENT_ID INT AUTO_INCREMENT PRIMARY KEY,
  CONTENT TEXT NOT NULL,
  BOARD_NUM INT NOT NULL REFERENCES plant_story(BOARD_NUM) ON DELETE CASCADE,  -- 게시글 번호 (FK)
  USER_EMAIL VARCHAR(50) NOT NULL REFERENCES USER(USER_EMAIL) ON DELETE CASCADE, -- 작성자 (FK)
  REG_DATE DATETIME DEFAULT SYSDATE()  
);

SELECT * FROM PLANT_REPLY;


# 좋아요 테이블
CREATE TABLE LIKE_PLANT (
   LIKE_NUM INT PRIMARY KEY AUTO_INCREMENT,
   BOARD_NUM INT REFERENCES plant_story (BOARD_NUM) ON DELETE CASCADE,
   USER_EMAIL VARCHAR(50) REFERENCES user (USER_EMAIL) 
);

SELECT * FROM LIKE_PLANT;

# 팔로우 테이블
CREATE TABLE FOLLOW (
   FOLLOW_ID INT AUTO_INCREMENT PRIMARY KEY,  -- 고유 식별자
   FROM_USER_EMAIL VARCHAR(50) NOT NULL,      -- 팔로우 하는 사람
   TO_USER_EMAIL VARCHAR(50) NOT NULL,        -- 팔로우 당하는 사람
   FOLLOW_DATE DATETIME DEFAULT SYSDATE(),    -- 팔로우 등록일

   -- 외래 키 설정
   CONSTRAINT FK_FROM_USER FOREIGN KEY (FROM_USER_EMAIL)
     REFERENCES USER(USER_EMAIL) ON DELETE CASCADE,

   CONSTRAINT FK_TO_USER FOREIGN KEY (TO_USER_EMAIL)
     REFERENCES USER(USER_EMAIL) ON DELETE CASCADE,

   -- 중복 팔로우 방지
   UNIQUE (FROM_USER_EMAIL, TO_USER_EMAIL)
);

SELECT * FROM FOLLOW;


#쪽지 테이블 
CREATE TABLE NOTE (
  ID INT AUTO_INCREMENT PRIMARY KEY,
  SENDER_EMAIL VARCHAR(100) NOT NULL,
  RECEIVER_EMAIL VARCHAR(100) NOT NULL,
  CONTENT TEXT NOT NULL,
  SENT_AT DATETIME DEFAULT SYSDATE()
);

SELECT * FROM note;


# 공지사항  게시글
CREATE TABLE board_FARMERS (
    BOARD_NUM INT PRIMARY KEY AUTO_INCREMENT,
    TITLE VARCHAR(50),
    USER_EMAIL VARCHAR(50) NOT NULL,
    CONTENT VARCHAR(100),
    VIEWS INT DEFAULT 0,
    DATE DATETIME DEFAULT SYSDATE(),
    FOREIGN KEY (USER_EMAIL) REFERENCES USER(USER_EMAIL) ON DELETE CASCADE
);

SELECT * FROM board_farmers;


#공지사항 댓글
CREATE TABLE REPLY_FARMERS (
    REPLY_NUM INT PRIMARY KEY AUTO_INCREMENT,
    CONTENT VARCHAR(100) NOT NULL,
    DATE DATETIME DEFAULT SYSDATE(),
    BOARD_NUM INT NOT NULL,
    USER_EMAIL VARCHAR(50) NOT NULL,
    FOREIGN KEY (USER_EMAIL) REFERENCES USER(USER_EMAIL) ON DELETE CASCADE,
    FOREIGN KEY (BOARD_NUM) REFERENCES board_FARMERS(BOARD_NUM) ON DELETE CASCADE
);

SELECT * FROM reply_farmers;



#QNA 댓글 테이블
CREATE TABLE QNA_REPLY (
    REPLY_NUM INT PRIMARY KEY AUTO_INCREMENT,
    CONTENT VARCHAR(100) NOT NULL,
    USER_EMAIL VARCHAR(50) NOT NULL,
    DATE DATETIME DEFAULT SYSDATE(),
    QNA_NUM INT NOT NULL,
    FOREIGN KEY (USER_EMAIL) REFERENCES USER(USER_EMAIL) ON DELETE CASCADE,
    FOREIGN KEY (QNA_NUM) REFERENCES QNA_BOARD(QNA_NUM) ON DELETE CASCADE
);

SELECT * FROM qna_reply;



-- QNA 게시판 테이블
CREATE TABLE QNA_BOARD (
    QNA_NUM INT PRIMARY KEY AUTO_INCREMENT,
    STATUS VARCHAR(10), -- 진행 상태
    TITLE VARCHAR(50),
    USER_EMAIL VARCHAR(50) NOT NULL,
    CONTENT VARCHAR(100),
    DATE DATETIME DEFAULT SYSDATE(),
    FOREIGN KEY ( USER_EMAIL) REFERENCES USER(USER_EMAIL) ON DELETE CASCADE
);

SELECT * FROM qna_board;



COMMIT;
